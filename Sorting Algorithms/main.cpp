////////////////////////////////////////////////////////////////////////////////
// main.cpp
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <random>
#include <functional>
#include "Source/BasicSortingAlgorithms.hpp"

////////////////////////////////////////////////////////////////////////////////
// Print a vector
////////////////////////////////////////////////////////////////////////////////
void printVector(const std::vector<int>& v, bool newline = false);

////////////////////////////////////////////////////////////////////////////////
// Fill a vector with random numbers
////////////////////////////////////////////////////////////////////////////////
void fillVector(std::vector<int>& v, int size, int min, int max);

////////////////////////////////////////////////////////////////////////////////
// Verify if the vector is sorted
////////////////////////////////////////////////////////////////////////////////
void verifySort(const std::vector<int>& v,const std::string& name);

////////////////////////////////////////////////////////////////////////////////
// Entry point of application
////////////////////////////////////////////////////////////////////////////////
int main()
{
	std::vector<int> v;

	fillVector(v,100,0,100);
	bubbleSort(v);
	verifySort(v, "Bubble Sort");

	fillVector(v,100,0,100);
	selectionSort(v);
	verifySort(v, "Selection Sort");

	fillVector(v,100,0,100);
	insertionSort(v);
	verifySort(v, "Insertion Sort");

	std::cin.get();
	return 0;
}

////////////////////////////////////////////////////////////////////////////////
// Print a vector
////////////////////////////////////////////////////////////////////////////////
void printVector(const std::vector<int>& v, bool newline)
{
	if(newline)
	{
		for(std::size_t i = 0; i < v.size(); ++i)
			std::cout << v[i] << std::endl;
	}
	else
	{
		for(std::size_t i = 0; i < v.size(); ++i)
			std::cout << v[i] << " ";
	}
}

////////////////////////////////////////////////////////////////////////////////
// Fill a vector with random numbers
////////////////////////////////////////////////////////////////////////////////
void fillVector(std::vector<int>& v, int size, int min, int max)
{
	// Make sure we have an empty vector
	v.clear();

	// Create a random number generator
	std::random_device rd;
	std::mt19937 engine(rd());
	std::uniform_int_distribution<int> distribution(min, max);

	auto generator = std::bind(distribution, engine);

	// Fill the vector with random numbers
	for(int i = 0; i < size; ++i)
		v.push_back(generator());
}

////////////////////////////////////////////////////////////////////////////////
// Verify if the vector is sorted
////////////////////////////////////////////////////////////////////////////////
void verifySort(const std::vector<int>& v,const std::string& name)
{
	std::cout << std::endl << "----- " << name << " (" << v.size() << ") -----" << std::endl;

	bool sorted = true;

	// Check if the vector is sorted
	for(std::size_t i = 0; i < v.size() - 1; ++i)
	{
		// If the next element is smaller than the previous one then the vector is not sorted
		if(v[i] > v[i + 1])
			sorted = false;
	}

	sorted ? std::cout << " Sorted!" << std::endl : std::cout << " Unsorted!" << std::endl;
}